openapi: 3.0.3
info:
  title: Bookstore API
  description: |-
    This is a sample Bookstore Server
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080

paths:
  /books:
    get:
      tags:
        - book
      summary: List all books
      description: List all books
      operationId: listBook
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/sizeParam"
        - $ref: "#/components/parameters/sortParam"
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/filterParam"
      responses:
        "200":
          description: Successful operation
          headers:
            X-Total:
              $ref: "#/components/headers/X-Total"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input
    post:
      tags:
        - book
      summary: Add a new book
      description: Add a new book
      operationId: addBook
      requestBody:
        description: Add a new book
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBook"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input

  /books/{id}:
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      tags:
        - book
      summary: Show book by id
      description: Show book by id
      operationId: showBook

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input
    patch:
      tags:
        - book
      summary: Update book by id
      description: Update book by id
      operationId: updateBook
      requestBody:
        description: Update a book in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBook"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input

    delete:
      tags:
        - book
      summary: Delete book by ID
      operationId: deleteBook

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found

components:
  headers:
    X-Total:
      schema:
        type: integer
      description: Total count.
  parameters:
    idParam:
      name: id
      in: path
      description: ID of the item
      required: true
      schema:
        type: integer
        format: int64
    pageParam:
      in: query
      name: page
      schema:
        type: integer
        minimum: 0
        default: 0
      required: false
      description: The number of page.
    sizeParam:
      in: query
      name: size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      required: false
      description: The number of items to return.
    sortParam:
      in: query
      name: sort
      schema:
        type: string
      required: false
      description: The sort of items.
      examples:
        none:
          value:
        asc:
          value: id
        desc:
          value: -id
        multi:
          value: id,created_at

    searchParam:
      in: query
      name: search
      schema:
        type: string
      required: false
      description: Search by keywords.
    filterParam:
      in: query
      name: filter
      style: deepObject
      schema:
        type: object
      required: false
      description: >
        Filter by fields
        with `operator`: eq, ne, lt, le, gt, ge, between, contains, like, startsWith, in
      examples:
        none:
          value:
        eq:
          value:
            title: title
        operator:
          value:
            title:contains: title
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: The Shortest History of Europe
        author:
          type: string
          example: J. B. Hirst
        created_at:
          type: string
          format: date-time
          example: 2006-01-02T15:04:05Z
        updated_at:
          type: string
          format: date-time
          example: 2006-01-02T15:04:05Z
    CreateBook:
      required:
        - title
        - author
      type: object
      properties:
        title:
          type: string
          example: The Shortest History of Europe
        author:
          type: string
          example: J. B. Hirst
    UpdateBook:
      type: object
      properties:
        title:
          type: string
          example: The Shortest History of Europe
        author:
          type: string
          example: J. B. Hirst

    ApiResponse:
      type: object
      properties:
        message:
          type: string
          example: ok

openapi: 3.0.3
info:
  title: Bookstore API
  description: |-
    This is a sample Bookstore Server based on gin, gorm
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080

paths:
  /books:
    get:
      tags:
        - book
      summary: List all books
      description: List all books
      operationId: listBook
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of page.
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          required: false
          description: The number of items to return.
        - in: query
          name: sort
          schema:
            type: string
            default: id
          required: false
          description: The sort of items.
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search keywords.
        - in: query
          name: filter
          style: deepObject
          schema:
            type: object
          required: false
          description: Filter.
      responses:
        "200":
          description: Successful operation
          headers:
            X-Total:
              schema:
                type: integer
              description: Total count.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input
    post:
      tags:
        - book
      summary: Add a new book to the store
      description: Add a new book to the store
      operationId: addBook
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBook"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input

  /books/{id}:
    get:
      tags:
        - book
      summary: Show book by id
      description: List all books
      operationId: showBook
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: Book id.

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input
    patch:
      tags:
        - book
      summary: Update book by id
      description: Update book by id
      operationId: updateBook
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
          description: Book id.
      requestBody:
        description: Update a book in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBook"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input

    delete:
      tags:
        - book
      summary: Delete book by ID
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          description: ID of the book that needs to be deleted
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: The Shortest History of Europe
        author:
          type: string
          example: J. B. Hirst
        created_at:
          type: string
          format: date-time
          example: 2006-01-02T15:04:05Z
        updated_at:
          type: string
          format: date-time
          example: 2006-01-02T15:04:05Z
    CreateBook:
      required:
        - title
        - author
      type: object
      properties:
        title:
          type: string
          example: The Shortest History of Europe
        author:
          type: string
          example: J. B. Hirst
    UpdateBook:
      type: object
      properties:
        title:
          type: string
          example: The Shortest History of Europe
        author:
          type: string
          example: J. B. Hirst

    ApiResponse:
      type: object
      properties:
        message:
          type: string
          example: ok
